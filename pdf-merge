#!/usr/bin/env bash

function show_help() {
    echo "Usage:        $(basename $0) [options]"
    echo "Dependencies: pdftk or ghostscript"
    echo "Options:      -h, --help                 show help"
    echo "              -v, --version              show version"
    echo "              -b, --bin    <pdftk|gs>    use pdftk if not specified"
    echo "              -i, --input  <file>        necessary if option is not -h or -v"
    echo "              -o, --output <file>        merge.pdf if not specified"
    echo "Example:      $(basename $0) -i 1.pdf 2.pdf 3.pdf -o out.pdf"
}

function show_version() {
    echo "$(basename $0) v20210904, depending on pdftk or ghostscript"
}

in_list='' && bin=pdftk && n=1
b=-1 && b_end=0 && in=-1 && in_end=0 && out=-1 && out_end=0

while [ $n -le $# ]; do
    eval var=\${$n}
    case $(echo "$var" | sed -e 's/\(.*\.\)//' | tr 'A-Z' 'a-z') in
    '-h' | '--help') show_help && exit 1 ;;
    '-v' | '--version') show_version && exit 1 ;;
    '-b' | '--bin')
        if [ $b = -1 ]; then
            b=0
            if [ $in -ge 0 ]; then
                in_end=1 # if input has already started, close it
            fi
            if [ $out -ge 0 ]; then
                out_end=1 # if output has already started, close it
            fi
        else
            echo "Error: option {-b, --bin} is duplicated!" && show_help && exit 1
        fi
        ;;
    '-i' | '--input')
        if [ $in = -1 ]; then
            in=0
            if [ $b -ge 0 ]; then
                b_end=1
            fi
            if [ $out -ge 0 ]; then
                out_end=1 # if output has already started, close it
            fi
        else
            echo "Error: option {-i, --input} is duplicated!" && show_help && exit 1
        fi
        ;;
    '-o' | '--output')
        if [ $out = -1 ]; then
            out=0
            if [ $b -ge 0 ]; then
                b_end=1
            fi
            if [ $in -ge 0 ]; then
                in_end=1 # if output has already started, close it
            fi
        else
            echo "Error: option {-o, --output} is duplicated!" && show_help && exit 1
        fi
        ;;
    'pdftk' | 'gs')
        if [ $b = 0 -a $b_end = 0 ]; then
            bin="$var" && b=1
        else
            echo "Error: invalid command!" && show_help && exit 1
        fi
        ;;
    'pdf')
        if [ $out = 0 -a $out_end = 0 ]; then
            output="$var" && out=1
        elif [ $in -ge 0 -a $in_end = 0 ]; then
            if [ -f "$var" ]; then # if file exists, append to in_list
                in_list="$in_list '$var'" && ((in++))
            else
                echo "Error: file '$var' not found!" && exit 1
            fi
        else
            echo "Error: invalid command!" && show_help && exit 1
        fi
        ;;
    *) echo "Error: unknown options or invalid file type!" && show_help && exit 1 ;;
    esac
    ((n++))
done

if [ $in -le 0 ]; then
    echo "Error: no input!" && show_help && exit 1
fi

case $out in
'-1') output='merge.pdf' ;;                             # output not specified
'0') echo "Error: no output!" && show_help && exit 1 ;; # with -o option but no output file specified
esac

case $bin in
'pdftk') command="pdftk$in_list cat output '$output'" ;;
'gs') command="gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -dPDFSETTINGS=/prepress -sOutputFile='$output'$in_list" ;;
esac

# echo $command
eval $command
